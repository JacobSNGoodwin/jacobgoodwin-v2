---
import sharp from 'sharp';
import { Picture } from '@astrojs/image/components';
import { nanoid } from 'nanoid';

export type Props = {
  // src: string | ImageMetadata;
  src: string; // for now support remote images only
  alt: string;
};

const { src, alt } = Astro.props as Props;

const finalSrc = `${import.meta.env.PUBLIC_IMAGE_BASE_URL}${src}`;
const res = await fetch(finalSrc);

const arrayBuffer = await res.arrayBuffer();
const buffer = Buffer.from(arrayBuffer);
const sharpImage = sharp(buffer);

const { width, height, format } = await sharpImage.metadata();

const initImg = await sharpImage
  .resize({ width: 50, fit: 'inside' })
  .blur()
  .toBuffer();

const initSrc = `data:image/${format};base64,${initImg.toString('base64')}`;

const aspectRatio = width / height;

const imgId = nanoid(6);
---

<img data-placeholder-id={imgId} class="picture" src={initSrc} width={width} />
<Picture
  data-img-id={imgId}
  class="picture"
  alt={alt}
  src={finalSrc}
  sizes="(max-width: 1024px) 100vw, 1024px"
  aspectRatio={aspectRatio}
  widths={[512, 1024, 2048]}
/>

<script define:vars={{ imgId }}>
  const imgEl = document.querySelector(`img[data-img-id="${imgId}"]`);
  const placeholderEl = document.querySelector(
    `img[data-placeholder-id="${imgId}"]`
  );

  imgEl.addEventListener('load', () => {
    imgEl.style.display = null;
    placeholderEl.style.display = 'none';
  });
</script>

<style lang="css">
  .picture {
    max-width: var(--content-width);
    display: block;
    width: 100vw;
    margin-left: 50%;
    transform: translateX(-50%);
  }
</style>
