---
import sharp from 'sharp';
import { Picture } from '@astrojs/image/components';
import { nanoid } from 'nanoid';

export type Props = {
  // src: string | ImageMetadata;
  src: string; // for now support remote images only
  alt: string;
  widths?: Array<number>;
};

const { src, alt, widths } = Astro.props as Props;

const finalSrc = `${import.meta.env.PUBLIC_IMAGE_BASE_URL}${src}`;
const res = await fetch(finalSrc);

const arrayBuffer = await res.arrayBuffer();
const buffer = Buffer.from(arrayBuffer);
const sharpImage = sharp(buffer);

const { width, height, format } = await sharpImage.metadata();

const initImg = await sharpImage
  .resize({ width: 50, fit: 'inside' })
  .blur()
  .toBuffer();

const initSrc = `data:image/${format};base64,${initImg.toString('base64')}`;

const aspectRatio = width / height;

const defaultWidths = [800, 1200, 1800, 2400].filter((w) => w <= width);

const imgId = nanoid(6);
---

<img
  data-placeholder-id={imgId}
  class="placeholder"
  src={initSrc}
  width={width}
/>
<!-- Set picture width for if width less than 100% of parent -->
<Picture
  data-img-id={imgId}
  width={width}
  class="picture"
  alt={alt}
  src={finalSrc}
  sizes="(max-width: 1024px) 100vw, 1024px"
  aspectRatio={aspectRatio}
  widths={widths ?? defaultWidths}
/>

<script>
  import imageLoader from '@src/scripts/imageLoader';
  imageLoader();
</script>

<style lang="css">
  .picture,
  .placeholder {
    display: block;
    margin: auto;
    max-width: 100%;
  }
</style>
